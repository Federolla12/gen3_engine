{
  "version": 3,
  "sources": ["../../../../data/mods/gen9fe/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\n\tgen: 9,\n\tactions: {\n\t\tinherit: true,\n\t\tterastallize(pokemon: Pokemon) {\n\t\t\tif (pokemon.illusion && ['Hattepon', 'Ogerpon', 'Terapagos'].includes(pokemon.illusion.species.baseSpecies)) {\n\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Rough Image'), pokemon.abilityState, pokemon);\n\t\t\t}\n\t\t\tconst type = pokemon.teraType;\n\t\t\tthis.battle.add('-terastallize', pokemon, type);\n\t\t\tpokemon.terastallized = type;\n\t\t\tfor (const ally of pokemon.side.pokemon) {\n\t\t\t\tally.canTerastallize = null;\n\t\t\t}\n\t\t\tpokemon.addedType = '';\n\t\t\tpokemon.knownType = true;\n\t\t\tpokemon.apparentType = type;\n\t\t\tpokemon.side.addSideCondition('teraused', pokemon);\n\t\t\tif (['Ogerpon', 'Hattepon'].includes(pokemon.species.baseSpecies)) {\n\t\t\t\tconst tera = ['ogerpon', 'hattepon'].includes(pokemon.species.id) ? 'tealtera' : 'tera';\n\t\t\t\tpokemon.formeChange(pokemon.species.id + tera, null, true);\n\t\t\t}\n\t\t\tthis.battle.runEvent('AfterTerastallization', pokemon);\n\t\t},\n\t\tcanMegaEvo(pokemon) {\n\t\t\tconst species = pokemon.baseSpecies;\n\t\t\tconst altForme = species.otherFormes && this.dex.species.get(species.otherFormes[0]);\n\t\t\tconst item = pokemon.getItem();\n\t\t\tif (\n\t\t\t\taltForme?.isMega && altForme?.requiredMove &&\n\t\t\t\tpokemon.baseMoves.includes(this.dex.toID(altForme.requiredMove)) && !item.zMove\n\t\t\t) {\n\t\t\t\treturn altForme.name;\n\t\t\t}\n\t\t\tif (item.megaStone === species.name) return null;\n\t\t\tswitch (species.name) {\n\t\t\tcase \"Chomptry\":\n\t\t\t\tif (item.name === \"Garchompite\") {\n\t\t\t\t\treturn \"Chomptry-Mega\";\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\tcase \"Tentazor\":\n\t\t\t\tif (item.name === \"Scizorite\") {\n\t\t\t\t\treturn \"Tentazor-Mega\";\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\tcase \"Aerodirge\":\n\t\t\t\tif (item.name === \"Aerodactylite\") {\n\t\t\t\t\treturn \"Aerodirge-Mega\";\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (item.megaEvolves === species.baseSpecies) {\n\t\t\t\treturn item.megaStone;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tcanUltraBurst(pokemon) {\n\t\t\tif (pokemon.baseSpecies.name === 'Necrotrik-Dawn-Wings' && pokemon.getItem().id === 'depletedultranecroziumz') {\n\t\t\t\treturn \"Necrotrik-Ultra\";\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\thitStepTryImmunity(targets, pokemon, move) {\n\t\t\tconst hitResults = [];\n\t\t\tfor (const [i, target] of targets.entries()) {\n\t\t\t\tif (move.flags['powder'] && target !== pokemon && !this.dex.getImmunity('powder', target)) {\n\t\t\t\t\tthis.battle.debug('natural powder immunity');\n\t\t\t\t} else if (this.battle.singleEvent('TryImmunity', move, {}, target, pokemon, move)) {\n\t\t\t\t\tif (move.pranksterBoosted && !this.dex.getImmunity('prankster', target) &&\n\t\t\t\t\t\tpokemon.hasAbility(['prankster', 'openingact', 'prankrock']) &&\n\t\t\t\t\t\t!targets[i].isAlly(pokemon)) {\n\t\t\t\t\t\tthis.battle.debug('natural prankster immunity');\n\t\t\t\t\t\tif (!target.illusion) this.battle.hint(\"Since gen 7, Dark is immune to Prankster moves.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\thitResults[i] = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.battle.add('-immune', target);\n\t\t\t\thitResults[i] = false;\n\t\t\t}\n\t\t\treturn hitResults;\n\t\t},\n\t\trunMove(\n\t\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, targetLoc: number,\n\t\t\toptions?: {\n\t\t\t\tsourceEffect?: Effect | null, zMove?: string, externalMove?: boolean,\n\t\t\t\tmaxMove?: string, originalTarget?: Pokemon,\n\t\t\t}\n\t\t) {\n\t\t\tpokemon.activeMoveActions++;\n\t\t\tconst zMove = options?.zMove;\n\t\t\tconst maxMove = options?.maxMove;\n\t\t\tconst externalMove = options?.externalMove;\n\t\t\tconst originalTarget = options?.originalTarget;\n\t\t\tlet sourceEffect = options?.sourceEffect;\n\t\t\tlet target = this.battle.getTarget(pokemon, maxMove || zMove || moveOrMoveName, targetLoc, originalTarget);\n\t\t\tlet baseMove = this.dex.getActiveMove(moveOrMoveName);\n\t\t\tconst priority = baseMove.priority;\n\t\t\tconst pranksterBoosted = baseMove.pranksterBoosted;\n\t\t\tif (baseMove.id !== 'struggle' && !zMove && !maxMove && !externalMove) {\n\t\t\t\tconst changedMove = this.battle.runEvent('OverrideAction', pokemon, target, baseMove);\n\t\t\t\tif (changedMove && changedMove !== true) {\n\t\t\t\t\tbaseMove = this.dex.getActiveMove(changedMove);\n\t\t\t\t\tbaseMove.priority = priority;\n\t\t\t\t\tif (pranksterBoosted) baseMove.pranksterBoosted = pranksterBoosted;\n\t\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, baseMove);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet move = baseMove;\n\t\t\tif (zMove) {\n\t\t\t\tmove = this.getActiveZMove(baseMove, pokemon);\n\t\t\t} else if (maxMove) {\n\t\t\t\tmove = this.getActiveMaxMove(baseMove, pokemon);\n\t\t\t}\n\t\t\tmove.isExternal = externalMove;\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\n\t\t\tconst willTryMove = this.battle.runEvent('BeforeMove', pokemon, target, move);\n\t\t\tif (!willTryMove) {\n\t\t\t\tthis.battle.runEvent('MoveAborted', pokemon, target, move);\n\t\t\t\tthis.battle.clearActiveMove(true);\n\t\t\t\t// The event 'BeforeMove' could have returned false or null\n\t\t\t\t// false indicates that this counts as a move failing for the purpose of calculating Stomping Tantrum's base power\n\t\t\t\t// null indicates the opposite, as the Pokemon didn't have an option to choose anything\n\t\t\t\tpokemon.moveThisTurnResult = willTryMove;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Used exclusively for a hint later\n\t\t\tif (move.flags['cantusetwice'] && pokemon.lastMove?.id === move.id) {\n\t\t\t\tpokemon.addVolatile(move.id);\n\t\t\t}\n\t\t\tif (move.beforeMoveCallback) {\n\t\t\t\tif (move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\n\t\t\t\t\tthis.battle.clearActiveMove(true);\n\t\t\t\t\tpokemon.moveThisTurnResult = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpokemon.lastDamage = 0;\n\t\t\tlet lockedMove;\n\t\t\tif (!externalMove) {\n\t\t\t\tlockedMove = this.battle.runEvent('LockMove', pokemon);\n\t\t\t\tif (lockedMove === true) lockedMove = false;\n\t\t\t\tif (!lockedMove) {\n\t\t\t\t\tif (!pokemon.deductPP(baseMove, null, target) && (move.id !== 'struggle')) {\n\t\t\t\t\t\tthis.battle.add('cant', pokemon, 'nopp', move);\n\t\t\t\t\t\tthis.battle.clearActiveMove(true);\n\t\t\t\t\t\tpokemon.moveThisTurnResult = false;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsourceEffect = this.dex.conditions.get('lockedmove');\n\t\t\t\t}\n\t\t\t\tpokemon.moveUsed(move, targetLoc);\n\t\t\t}\n\t\t\t// Dancer Petal Dance hack\n\t\t\t// TODO: implement properly\n\t\t\tconst noLock = externalMove && !pokemon.volatiles['lockedmove'];\n\t\t\tif (zMove) {\n\t\t\t\tif (pokemon.illusion) {\n\t\t\t\t\tthis.battle.singleEvent('End', this.dex.abilities.get('Rough Image'), pokemon.abilityState, pokemon);\n\t\t\t\t}\n\t\t\t\tthis.battle.add('-zpower', pokemon);\n\t\t\t\tpokemon.side.zMoveUsed = true;\n\t\t\t}\n\t\t\tconst oldActiveMove = move;\n\t\t\tconst moveDidSomething = this.useMove(baseMove, pokemon, { target, sourceEffect, zMove, maxMove });\n\t\t\tthis.battle.lastSuccessfulMoveThisTurn = moveDidSomething ? this.battle.activeMove && this.battle.activeMove.id : null;\n\t\t\tif (this.battle.activeMove) move = this.battle.activeMove;\n\t\t\tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\n\t\t\tthis.battle.runEvent('AfterMove', pokemon, target, move);\n\t\t\tif (move.flags['cantusetwice'] && pokemon.removeVolatile(move.id)) {\n\t\t\t\tthis.battle.add('-hint', `Some effects can force a Pokemon to use ${move.name} again in a row.`);\n\t\t\t}\n\t\t\t// TODO: Refactor to use BattleQueue#prioritizeAction in onAnyAfterMove handlers\n\t\t\t// Dancer's activation order is completely different from any other event, so it's handled separately\n\t\t\tif (move.flags['dance'] && moveDidSomething && !move.isExternal) {\n\t\t\t\tconst dancers = [];\n\t\t\t\tfor (const currentPoke of this.battle.getAllActive()) {\n\t\t\t\t\tif (pokemon === currentPoke) continue;\n\t\t\t\t\tif (currentPoke.hasAbility('choreography') && !currentPoke.isSemiInvulnerable()) {\n\t\t\t\t\t\tdancers.push(currentPoke);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Dancer activates in order of lowest speed stat to highest\n\t\t\t\t// Note that the speed stat used is after any volatile replacements like Speed Swap,\n\t\t\t\t// but before any multipliers like Agility or Choice Scarf\n\t\t\t\t// Ties go to whichever Pokemon has had the ability for the least amount of time\n\t\t\t\tdancers.sort(\n\t\t\t\t\t(a, b) => -(b.storedStats['spe'] - a.storedStats['spe']) || b.abilityState.effectOrder - a.abilityState.effectOrder\n\t\t\t\t);\n\t\t\t\tconst targetOf1stDance = this.battle.activeTarget!;\n\t\t\t\tfor (const dancer of dancers) {\n\t\t\t\t\tif (this.battle.faintMessages()) break;\n\t\t\t\t\tif (dancer.fainted) continue;\n\t\t\t\t\tthis.battle.add('-activate', dancer, 'ability: Choreography');\n\t\t\t\t\tconst dancersTarget = !targetOf1stDance.isAlly(dancer) && pokemon.isAlly(dancer) ?\n\t\t\t\t\t\ttargetOf1stDance :\n\t\t\t\t\t\tpokemon;\n\t\t\t\t\tconst dancersTargetLoc = dancer.getLocOf(dancersTarget);\n\t\t\t\t\tthis.runMove(\n\t\t\t\t\t\tmove.id, dancer, dancersTargetLoc, { sourceEffect: this.dex.abilities.get('choreography'), externalMove: true }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (noLock && pokemon.volatiles['lockedmove']) delete pokemon.volatiles['lockedmove'];\n\t\t\tthis.battle.faintMessages();\n\t\t\tthis.battle.checkWin();\n\t\t\tif (this.battle.gen <= 4) {\n\t\t\t\t// In gen 4, the outermost move is considered the last move for Copycat\n\t\t\t\tthis.battle.activeMove = oldActiveMove;\n\t\t\t}\n\t\t},\n\t\tuseMoveInner(\n\t\t\tmoveOrMoveName: Move | string, pokemon: Pokemon, options?: {\n\t\t\t\ttarget?: Pokemon | null, sourceEffect?: Effect | null,\n\t\t\t\tzMove?: string, maxMove?: string,\n\t\t\t},\n\t\t) {\n\t\t\tlet target = options?.target;\n\t\t\tlet sourceEffect = options?.sourceEffect;\n\t\t\tconst zMove = options?.zMove;\n\t\t\tconst maxMove = options?.maxMove;\n\t\t\tif (!sourceEffect && this.battle.effect.id) sourceEffect = this.battle.effect;\n\t\t\tif (sourceEffect && ['instruct', 'custapberry'].includes(sourceEffect.id)) sourceEffect = null;\n\t\t\tlet move = this.dex.getActiveMove(moveOrMoveName);\n\t\t\tpokemon.lastMoveUsed = move;\n\t\t\tif (move.id === 'weatherball' && zMove) {\n\t\t\t\t// Z-Weather Ball only changes types if it's used directly,\n\t\t\t\t// not if it's called by Z-Sleep Talk or something.\n\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\n\t\t\t\tif (move.type !== 'Normal') sourceEffect = move;\n\t\t\t}\n\t\t\tif (zMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isZ)) {\n\t\t\t\tmove = this.getActiveZMove(move, pokemon);\n\t\t\t}\n\t\t\tif (maxMove && move.category !== 'Status') {\n\t\t\t\t// Max move outcome is dependent on the move type after type modifications from ability and the move itself\n\t\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\n\t\t\t\tthis.battle.runEvent('ModifyType', pokemon, target, move, move);\n\t\t\t}\n\t\t\tif (maxMove || (move.category !== 'Status' && sourceEffect && (sourceEffect as ActiveMove).isMax)) {\n\t\t\t\tmove = this.getActiveMaxMove(move, pokemon);\n\t\t\t}\n\t\t\tif (this.battle.activeMove) {\n\t\t\t\tmove.priority = this.battle.activeMove.priority;\n\t\t\t\tif (!move.hasBounced) move.pranksterBoosted = this.battle.activeMove.pranksterBoosted;\n\t\t\t}\n\t\t\tconst baseTarget = move.target;\n\t\t\tlet targetRelayVar = { target };\n\t\t\ttargetRelayVar = this.battle.runEvent('ModifyTarget', pokemon, target, move, targetRelayVar, true);\n\t\t\tif (targetRelayVar.target !== undefined) target = targetRelayVar.target;\n\t\t\tif (target === undefined) target = this.battle.getRandomTarget(pokemon, move);\n\t\t\tif (move.target === 'self' || move.target === 'allies') {\n\t\t\t\ttarget = pokemon;\n\t\t\t}\n\t\t\tif (sourceEffect) {\n\t\t\t\tmove.sourceEffect = sourceEffect.id;\n\t\t\t\tmove.ignoreAbility = (sourceEffect as ActiveMove).ignoreAbility;\n\t\t\t}\n\t\t\tlet moveResult = false;\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\n\t\t\tthis.battle.singleEvent('ModifyType', move, null, pokemon, target, move, move);\n\t\t\tthis.battle.singleEvent('ModifyMove', move, null, pokemon, target, move, move);\n\t\t\tif (baseTarget !== move.target) {\n\t\t\t\t// Target changed in ModifyMove, so we must adjust it here\n\t\t\t\t// Adjust before the next event so the correct target is passed to the\n\t\t\t\t// event\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\n\t\t\t}\n\t\t\tmove = this.battle.runEvent('ModifyType', pokemon, target, move, move);\n\t\t\tmove = this.battle.runEvent('ModifyMove', pokemon, target, move, move);\n\t\t\tif (baseTarget !== move.target) {\n\t\t\t\t// Adjust again\n\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\n\t\t\t}\n\t\t\tif (!move || pokemon.fainted) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet attrs = '';\n\t\t\tlet movename = move.name;\n\t\t\tif (move.id === 'hiddenpower') movename = 'Hidden Power';\n\t\t\tif (sourceEffect) attrs += `|[from] ${sourceEffect.fullname}`;\n\t\t\tif (zMove && move.isZ === true) {\n\t\t\t\tattrs = `|[anim]${movename}${attrs}`;\n\t\t\t\tmovename = `Z-${movename}`;\n\t\t\t}\n\t\t\tthis.battle.addMove('move', pokemon, movename, `${target}${attrs}`);\n\t\t\tif (zMove) this.runZPower(move, pokemon);\n\t\t\tif (!target) {\n\t\t\t\tthis.battle.attrLastMove('[notarget]');\n\t\t\t\tthis.battle.add(this.battle.gen >= 5 ? '-fail' : '-notarget', pokemon);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst { targets, pressureTargets } = pokemon.getMoveTargets(move, target);\n\t\t\tif (targets.length) {\n\t\t\t\ttarget = targets[targets.length - 1]; // in case of redirection\n\t\t\t}\n\t\t\tconst callerMoveForPressure = sourceEffect && (sourceEffect as ActiveMove).pp ? sourceEffect as ActiveMove : null;\n\t\t\tif (!sourceEffect || callerMoveForPressure || sourceEffect.id === 'pursuit') {\n\t\t\t\tlet extraPP = 0;\n\t\t\t\tfor (const source of pressureTargets) {\n\t\t\t\t\tconst ppDrop = this.battle.runEvent('DeductPP', source, pokemon, move);\n\t\t\t\t\tif (ppDrop !== true) {\n\t\t\t\t\t\textraPP += ppDrop || 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (extraPP > 0) {\n\t\t\t\t\tpokemon.deductPP(callerMoveForPressure || moveOrMoveName, extraPP);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.battle.singleEvent('TryMove', move, null, pokemon, target, move) ||\n\t\t\t\t!this.battle.runEvent('TryMove', pokemon, target, move)) {\n\t\t\t\tmove.mindBlownRecoil = false;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.battle.singleEvent('UseMoveMessage', move, null, pokemon, target, move);\n\t\t\tif (move.ignoreImmunity === undefined) {\n\t\t\t\tmove.ignoreImmunity = (move.category === 'Status');\n\t\t\t}\n\t\t\tif (this.battle.gen !== 4 && move.selfdestruct === 'always') {\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\n\t\t\t}\n\t\t\tlet damage: number | false | undefined | '' = false;\n\t\t\tif (move.target === 'all' || move.target === 'foeSide' || move.target === 'allySide' || move.target === 'allyTeam') {\n\t\t\t\tdamage = this.tryMoveHit(targets, pokemon, move);\n\t\t\t\tif (damage === this.battle.NOT_FAIL) pokemon.moveThisTurnResult = null;\n\t\t\t\tif (damage || damage === 0 || damage === undefined) moveResult = true;\n\t\t\t} else {\n\t\t\t\tif (!targets.length) {\n\t\t\t\t\tthis.battle.attrLastMove('[notarget]');\n\t\t\t\t\tthis.battle.add(this.battle.gen >= 5 ? '-fail' : '-notarget', pokemon);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (this.battle.gen === 4 && move.selfdestruct === 'always') {\n\t\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\n\t\t\t\t}\n\t\t\t\tmoveResult = this.trySpreadMoveHit(targets, pokemon, move);\n\t\t\t}\n\t\t\tif (move.selfBoost && moveResult) this.moveHit(pokemon, pokemon, move, move.selfBoost, false, true);\n\t\t\tif (!pokemon.hp) {\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\n\t\t\t}\n\t\t\tif (!moveResult) {\n\t\t\t\tthis.battle.singleEvent('MoveFail', move, null, target, pokemon, move);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!move.negateSecondary &&\n\t\t\t\t!(move.hasSheerForce &&\n\t\t\t\t\tpokemon.hasAbility(['sheerforce', 'forceofnature', 'sandwrath', 'overwhelming', 'powerbuns'])) &&\n\t\t\t\t\t!move.flags['futuremove']\n\t\t\t) {\n\t\t\t\tconst originalHp = pokemon.hp;\n\t\t\t\tthis.battle.singleEvent('AfterMoveSecondarySelf', move, null, pokemon, target, move);\n\t\t\t\tthis.battle.runEvent('AfterMoveSecondarySelf', pokemon, target, move);\n\t\t\t\tif (pokemon && pokemon !== target && move.category !== 'Status') {\n\t\t\t\t\tif (pokemon.hp <= pokemon.maxhp / 2 && originalHp > pokemon.maxhp / 2) {\n\t\t\t\t\t\tthis.battle.runEvent('EmergencyExit', pokemon, pokemon);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\tmodifyDamage(\n\t\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\n\t\t) {\n\t\t\tconst tr = this.battle.trunc;\n\t\t\tif (!move.type) move.type = '???';\n\t\t\tconst type = move.type;\n\t\t\tbaseDamage += 2;\n\t\t\tif (move.spreadHit) {\n\t\t\t\t// multi-target modifier (doubles only)\n\t\t\t\tconst spreadModifier = move.spreadModifier || (this.battle.gameType === 'freeforall' ? 0.5 : 0.75);\n\t\t\t\tthis.battle.debug(`Spread modifier: ${spreadModifier}`);\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, spreadModifier);\n\t\t\t} else if (move.multihitType === 'parentalbond' && move.hit > 1) {\n\t\t\t\t// Parental Bond modifier\n\t\t\t\tconst bondModifier = this.battle.gen > 6 ? 0.25 : 0.5;\n\t\t\t\tthis.battle.debug(`Parental Bond modifier: ${bondModifier}`);\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, bondModifier);\n\t\t\t}\n\t\t\t// weather modifier\n\t\t\tbaseDamage = this.battle.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\n\t\t\t// crit - not a modifier\n\t\t\tconst isCrit = target.getMoveHitData(move).crit;\n\t\t\tif (isCrit) {\n\t\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || (this.battle.gen >= 6 ? 1.5 : 2)));\n\t\t\t}\n\t\t\t// random factor - also not a modifier\n\t\t\tbaseDamage = this.battle.randomizer(baseDamage);\n\t\t\t// STAB\n\t\t\t// The \"???\" type never gets STAB\n\t\t\t// Not even if you Roost in Gen 4 and somehow manage to use\n\t\t\t// Struggle in the same turn.\n\t\t\t// (On second thought, it might be easier to get a MissingNo.)\n\t\t\tif (type !== '???') {\n\t\t\t\tlet stab: number | [number, number] = 1;\n\t\t\t\tconst isSTAB = move.forceSTAB || pokemon.hasType(type) || pokemon.getTypes(false, true).includes(type);\n\t\t\t\tif (isSTAB) {\n\t\t\t\t\tstab = 1.5;\n\t\t\t\t}\n\t\t\t\t// The Stellar tera type makes this incredibly confusing\n\t\t\t\t// If the move's type does not match one of the user's base types,\n\t\t\t\t// the Stellar tera type applies a one-time 1.2x damage boost for that type.\n\t\t\t\t// If the move's type does match one of the user's base types,\n\t\t\t\t// then the Stellar tera type applies a one-time 2x STAB boost for that type,\n\t\t\t\t// and then goes back to using the regular 1.5x STAB boost for those types.\n\t\t\t\tif (pokemon.terastallized === 'Stellar') {\n\t\t\t\t\tif (!pokemon.stellarBoostedTypes.includes(type) || move.stellarBoosted) {\n\t\t\t\t\t\tstab = isSTAB ? 2 : [4915, 4096];\n\t\t\t\t\t\tmove.stellarBoosted = true;\n\t\t\t\t\t\tif (pokemon.species.name !== 'Terapagos-Stellar') {\n\t\t\t\t\t\t\tpokemon.stellarBoostedTypes.push(type);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (pokemon.terastallized === type && pokemon.getTypes(false, true).includes(type)) {\n\t\t\t\t\t\tstab = 2;\n\t\t\t\t\t}\n\t\t\t\t\tstab = this.battle.runEvent('ModifySTAB', pokemon, target, move, stab);\n\t\t\t\t}\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, stab);\n\t\t\t}\n\t\t\t// types\n\t\t\tlet typeMod = target.runEffectiveness(move);\n\t\t\ttypeMod = this.battle.clampIntRange(typeMod, -6, 6);\n\t\t\ttarget.getMoveHitData(move).typeMod = typeMod;\n\t\t\tif (typeMod > 0) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\n\t\t\t\tfor (let i = 0; i < typeMod; i++) {\n\t\t\t\t\tbaseDamage *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeMod < 0) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\n\t\t\t\tfor (let i = 0; i > typeMod; i--) {\n\t\t\t\t\tbaseDamage = tr(baseDamage / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isCrit && !suppressMessages) this.battle.add('-crit', target);\n\t\t\tif (pokemon.status === 'brn' && move.category === 'Physical' &&\n\t\t\t\t!pokemon.hasAbility(['wellbakedflameorb', 'feistytempo', 'guts', 'adrenalinearoma'])) {\n\t\t\t\tif (this.battle.gen < 6 || move.id !== 'facade') {\n\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.5);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\n\t\t\tif (this.battle.gen === 5 && !baseDamage) baseDamage = 1;\n\t\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\n\t\t\tbaseDamage = this.battle.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\n\t\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.25);\n\t\t\t\tthis.battle.add('-zbroken', target);\n\t\t\t}\n\t\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\n\t\t\tif (this.battle.gen !== 5 && !baseDamage) return 1;\n\t\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\n\t\t\treturn tr(baseDamage, 16);\n\t\t},\n\n\t\t/* secondaries(targets: SpreadMoveTargets, source: Pokemon, move: ActiveMove, moveData: ActiveMove, isSelf?: boolean) {\n\t\t\tif (!moveData.secondaries) return;\n\t\t\tfor (const foe of targets) {\n\t\t\t\tif (foe === false) continue;\n\t\t\t\tconst secondaries: Dex.SecondaryEffect[] =\n\t\t\t\t\tthis.battle.runEvent('ModifySecondaries', foe, source, moveData, moveData.secondaries.slice());\n\t\t\t\tfor (const secondary of secondaries) {\n\t\t\t\t\tconst secondaryRoll = this.battle.random(100);\n\t\t\t\t\t// User stat boosts or foe stat drops can possibly overflow if it goes beyond 256 in Gen 8 or prior\n\t\t\t\t\tconst secondaryOverflow = (secondary.boosts || secondary.self) && this.battle.gen <= 8;\n\t\t\t\t\tif (typeof secondary.chance === 'undefined' ||\n\t\t\t\t\t\tsecondaryRoll < (secondaryOverflow ? secondary.chance % 256 : secondary.chance)) {\n\t\t\t\t\t\tlet flag = true;\n\t\t\t\t\t\tif (moveData.secondary?.status && foe) flag = foe.setStatus(moveData.secondary.status, source);\n\t\t\t\t\t\tif (moveData.secondary?.volatileStatus && foe) flag = !(moveData.secondary.volatileStatus in foe.volatiles);\n\t\t\t\t\t\tif (moveData.secondary?.volatileStatus === 'flinch' && foe) flag = flag && foe.activeTurns >= 1 && !foe.moveThisTurn;\n\t\t\t\t\t\tthis.moveHit(foe, source, move, secondary, true, isSelf);\n\t\t\t\t\t\tif (moveData.secondary?.self?.boosts) {\n\t\t\t\t\t\t\tObject.entries(moveData.secondary.self.boosts).forEach(([stat, boost]) => {\n\t\t\t\t\t\t\t\tif (source.boosts[stat as BoostID] === 6) flag = false;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (foe) flag = flag && !(foe.hp === undefined || foe.hp <= 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (moveData.target !== 'self' && moveData.secondary?.boosts && foe) {\n\t\t\t\t\t\t\tconst cantLower = {\n\t\t\t\t\t\t\t\t'atk': ['clearbody', 'fullmetalbody', 'hypercutter', 'whitesmoke'],\n\t\t\t\t\t\t\t\t'def': ['bigpecks', 'clearbody', 'fullmetalbody', 'whitesmoke'],\n\t\t\t\t\t\t\t\t'spa': ['clearbody', 'fullmetalbody', 'whitesmoke'],\n\t\t\t\t\t\t\t\t'spd': ['clearbody', 'fullmetalbody', 'whitesmoke'],\n\t\t\t\t\t\t\t\t'spe': ['clearbody', 'fullmetalbody', 'whitesmoke'],\n\t\t\t\t\t\t\t\t'accuracy': ['clearbody', 'fullmetalbody', 'keeneye', 'whitesmoke'],\n\t\t\t\t\t\t\t\t'evasion': [] };\n\t\t\t\t\t\t\tfor (const k in moveData.secondary.boosts) {\n\t\t\t\t\t\t\t\tif (foe.boosts[k as BoostID] === -6) {\n\t\t\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (foe.hasAbility(cantLower[k as BoostID]) && !move.ignoreAbility) {\n\t\t\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (source.hasAbility('sheerforce')) flag = false;\n\t\t\t\t\t\tif (foe && foe.hasAbility('shielddust') && !move.ignoreAbility &&\n\t\t\t\t\t\t\tmove.secondary && !move.secondary.self?.boosts) {\n\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (flag && foe && foe.hasAbility('serenesync') && move.secondary && secondary.chance) {\n\t\t\t\t\t\t\tthis.battle.add('-activate', foe, 'ability: Serene Sync');\n\t\t\t\t\t\t\tmove.secondary.self = move.secondary;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, */\n\t},\n\tpokemon: {\n\t\trunImmunity(source, message) {\n\t\t\tif (!source) return true;\n\t\t\tconst type: string = typeof source !== 'string' ? source.type : source;\n\t\t\tif (typeof source !== 'string') {\n\t\t\t\tif (source.ignoreImmunity && (source.ignoreImmunity === true || source.ignoreImmunity[type])) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!type || type === '???') return true;\n\t\t\tif (!this.battle.dex.types.isName(type)) {\n\t\t\t\tthrow new Error(\"Use runStatusImmunity for \" + type);\n\t\t\t}\n\t\t\tconst negateImmunity = !this.battle.runEvent('NegateImmunity', this, type);\n\t\t\tconst notImmune = type === 'Ground' ?\n\t\t\t\tthis.isGrounded(negateImmunity) :\n\t\t\t\tnegateImmunity || this.battle.dex.getImmunity(type, this);\n\t\t\tif (notImmune) return true;\n\t\t\tif (!message) return false;\n\t\t\tif (notImmune === null) {\n\t\t\t\tthis.battle.add('-immune', this, '[from] ability: ' + this.getAbility().name);\n\t\t\t} else {\n\t\t\t\tthis.battle.add('-immune', this);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tisGrounded(negateImmunity = false) {\n\t\t\tif ('gravity' in this.battle.field.pseudoWeather) return true;\n\t\t\tif ('ingrain' in this.volatiles && this.battle.gen >= 4) return true;\n\t\t\tif ('smackdown' in this.volatiles) return true;\n\t\t\tconst item = (this.ignoringItem() ? '' : this.item);\n\t\t\tif (item === 'ironball') return true;\n\t\t\t// If a Fire/Flying type uses Burn Up and Roost, it becomes ???/Flying-type, but it's still grounded.\n\t\t\tif (!negateImmunity && this.hasType('Flying') && !(this.hasType('???') && 'roost' in this.volatiles)) return false;\n\t\t\tif (\n\t\t\t\t(this.hasAbility([\n\t\t\t\t\t'levitate', 'holygrail', 'risingtension', 'freeflight', 'airbornearmor', 'hellkite', 'honeymoon',\n\t\t\t\t\t'aircontrol', 'magnetize', 'unidentifiedflyingobject', 'anointed',\n\t\t\t\t])) &&\n\t\t\t\t!this.battle.suppressingAbility(this)\n\t\t\t) return null;\n\t\t\tif ('magnetrise' in this.volatiles) return false;\n\t\t\tif ('telekinesis' in this.volatiles) return false;\n\t\t\treturn item !== 'airballoon';\n\t\t},\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
